# -*- coding: utf-8 -*-
"""Simonov_Segey.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JcvZR0fIreLXi7XMhMwziaf7LuMJSJj0
"""

!pip install  ncon

import numpy as np
from ncon import ncon
import time

"""# Лабораторная №1

Задание изнальных тензоров
"""

A = np.random.rand(10, 10, 10)
B = np.random.rand(10, 10, 10, 10)
C = np.random.rand(10, 10, 10, 10)
E = np.random.rand(10, 10, 10)
D = np.random.rand(10, 10, 10)

"""1. Свертка циклами for"""

def ConvFor(A, B, C, D, E):
    AC = np.zeros((10, 10, 10, 10, 10))
    for i in range(10):
        for j in range(10):
            for k in range(10):
                for l in range(10):
                    for m in range(10):
                        for n in range(10): 
                            AC[i, j, k, l, m] = AC[i, j, k, l, m] + A[i, j, n] * C[n, k, l, m]
    ACB = np.zeros((10, 10, 10, 10, 10))
    for i in range(10):
        for j in range(10):
            for k in range(10):
                for l in range(10):
                    for m in range(10):
                        for n in range(10):
                            for p in range(10):  
                                ACB[i, j, k, l, m] = ACB[i, j, k, l, m] + AC[i, n, p, j, k] * B[n, p, m, l]
    ACBE = np.zeros((10, 10, 10, 10))
    for i in range(10):
        for j in range(10):
            for k in range(10):
                for l in range(10):
                    for m in range(10):
                        for n in range(10):
                            ACBE[i, j, k, l] = ACBE[i, j, k, l] + ACB[i, j, m, k, n] * E[n, m, l]
    result  = np.zeros((10, 10, 10))
    for i in range(10):
        for j in range(10):
            for k in range(10):
                for l in range(10):
                    for m in range(10):
                        result[i, j, k] =  result[i, j, k] + ACBE[i, l, j, m] + D[m, l, k]
    return result

# Commented out IPython magic to ensure Python compatibility.
# %%timeit
# result = ConvFor(A, B, C, D, E)

ConvFor(A, B, C, D, E)

"""2. Свертка при помощи reshape и @"""

def ConvReshape(A, B, C, D, E):
    AC = np.tensordot(A, C, axes=([2],[0]))
    ACB = np.tensordot(AC, B, axes=([1,2],[0,1]))
    ACBE = np.tensordot(ACB, E, axes=([2,3],[1,0]))
    return np.tensordot(ACBE, D, axes=([1,2],[1,2]))

# Commented out IPython magic to ensure Python compatibility.
# %%timeit
# result = ConvReshape(A, B, C, D, E)

ConvReshape(A, B, C, D, E)

"""3. Свертка ncon"""

def ConvNcon(A, B, C, D, E):
  return ncon((A, B, C, D, E), ([-1, 1, 5], [1, 6, 2, -2], [5, 6, 4, 7], [3, 4, -3], [2, 7, 3]))

# Commented out IPython magic to ensure Python compatibility.
# %%timeit
# result = ConvNcon(A, B, C, D, E)

ConvNcon(A, B, C, D, E)

"""# Топ по скорости выполнения:

1. reshpe + @

2. ncon

3. for
"""

